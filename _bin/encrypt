#! /usr/bin/env ruby

require 'base64'
require 'digest/sha2'
require 'openssl'
require 'tempfile'
require 'yaml'
require 'jekyll'

# ensure there is an EDITOR configured
if ENV["EDITOR"].to_s.empty?
  puts "No $EDITOR to open file in. Assign one like this:"
  puts ""
  puts "EDITOR=\"mate --wait\" #{__FILE__} #{ARGV.join(' ')})"
  puts ""
  puts "For editors that fork and exit immediately, it's important to pass a wait flag,"
  puts "otherwise the credentials will be saved immediately with no chance to edit."
end

# filename from CLI arg
path = ARGV.first
if path.nil? || path.empty? || !File.file?(path)
  puts "Please provide a valid file path."
end

# prompt for passphrase from CLI
pass = ""
while (pass.nil? || pass.empty? || pass.length < 32)
  puts "Please provide a passphrase at least 32 characters long:"
  pass = STDIN.gets.chomp
end

# convert/pad passphrase to 256-bit key
key = Digest::SHA256.digest(pass)

# open encrypted file
decrypted = ''
content = nil
file = File.read(path)
if file =~ Jekyll::Document::YAML_FRONT_MATTER_REGEXP
  content = Regexp.last_match.post_match.strip
  data = YAML.load(Regexp.last_match(1))
end

# decrypt file contents, if they exist and we have an IV
if data && data['iv'] && content
  cipher = OpenSSL::Cipher.new('AES-256-CBC')
  cipher.decrypt
  cipher.key = key
  cipher.iv = Base64.strict_decode64(data['iv'])
  decrypted << cipher.update(Base64.strict_decode64(content))
  decrypted << cipher.final
end

# open temp file w/ decrypted contents in EDITOR
new_content = ''
tmp_file = Tempfile.new(path)
begin
  tmp_file.write(decrypted)
  tmp_file.rewind
  system("#{ENV["EDITOR"]} #{tmp_file.path}")
  new_content = tmp_file.read
ensure
  tmp_file.close # garbage collection
  tmp_file.unlink # filesystem cleanup
end

# encrypt
cipher = OpenSSL::Cipher.new('AES-256-CBC')
cipher.encrypt
cipher.key = key
# generate a new IV on every save
cipher.iv = iv = cipher.random_iv
encrypted = cipher.update(new_content)
encrypted << cipher.final

yaml_obj = {
  'layout' => 'secret',
  'iv' => Base64.strict_encode64(iv)
}

# save file
File.open(path, 'w') do |out|
  YAML::dump(yaml_obj, out)
  out.write("---\n")
  out.write(Base64.strict_encode64(encrypted))
  out.write("\n")
end

exit
